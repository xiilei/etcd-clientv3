/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.authpb.Permission', null, global);
goog.exportSymbol('proto.authpb.Permission.Type', null, global);
goog.exportSymbol('proto.authpb.Role', null, global);
goog.exportSymbol('proto.authpb.User', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.authpb.User.repeatedFields_, null);
};
goog.inherits(proto.authpb.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authpb.User.displayName = 'proto.authpb.User';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.authpb.User.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.authpb.User.prototype.toObject = function(opt_includeInstance) {
  return proto.authpb.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.authpb.User} msg The msg instance to transform.
 * @return {!Object}
 */
proto.authpb.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64(),
    password: msg.getPassword_asB64(),
    rolesList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.User}
 */
proto.authpb.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authpb.User;
  return proto.authpb.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.User}
 */
proto.authpb.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.getRolesList().push(value);
      msg.setRolesList(msg.getRolesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.authpb.User} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.authpb.User.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.authpb.User.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName_asU8();
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getPassword_asU8();
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.authpb.User} The clone.
 */
proto.authpb.User.prototype.cloneMessage = function() {
  return /** @type {!proto.authpb.User} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes name = 1;
 * @return {(string|Uint8Array)}
 */
proto.authpb.User.prototype.getName = function() {
  return /** @type {(string|Uint8Array)} */ (jspb.Message.getField(this, 1));
};


/**
 * optional bytes name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string?}
 */
proto.authpb.User.prototype.getName_asB64 = function() {
  return /** @type {string?} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {Uint8Array}
 */
proto.authpb.User.prototype.getName_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.authpb.User.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.authpb.User.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * optional bytes password = 2;
 * @return {(string|Uint8Array)}
 */
proto.authpb.User.prototype.getPassword = function() {
  return /** @type {(string|Uint8Array)} */ (jspb.Message.getField(this, 2));
};


/**
 * optional bytes password = 2;
 * This is a type-conversion wrapper around `getPassword()`
 * @return {string?}
 */
proto.authpb.User.prototype.getPassword_asB64 = function() {
  return /** @type {string?} */ (jspb.Message.bytesAsB64(
      this.getPassword()));
};


/**
 * optional bytes password = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassword()`
 * @return {Uint8Array}
 */
proto.authpb.User.prototype.getPassword_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassword()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.authpb.User.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.authpb.User.prototype.clearPassword = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * repeated string roles = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.authpb.User.prototype.getRolesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {Array.<string>|undefined} value  */
proto.authpb.User.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.authpb.User.prototype.clearRolesList = function() {
  jspb.Message.setField(this, 3, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.Permission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.authpb.Permission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authpb.Permission.displayName = 'proto.authpb.Permission';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.authpb.Permission.prototype.toObject = function(opt_includeInstance) {
  return proto.authpb.Permission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.authpb.Permission} msg The msg instance to transform.
 * @return {!Object}
 */
proto.authpb.Permission.toObject = function(includeInstance, msg) {
  var f, obj = {
    permtype: jspb.Message.getField(msg, 1),
    key: msg.getKey_asB64(),
    rangeEnd: msg.getRangeEnd_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.Permission}
 */
proto.authpb.Permission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authpb.Permission;
  return proto.authpb.Permission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.Permission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.Permission}
 */
proto.authpb.Permission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.authpb.Permission.Type} */ (reader.readEnum());
      msg.setPermtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRangeEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.authpb.Permission} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.authpb.Permission.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.Permission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.authpb.Permission.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPermtype();
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getKey_asU8();
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getRangeEnd_asU8();
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.authpb.Permission} The clone.
 */
proto.authpb.Permission.prototype.cloneMessage = function() {
  return /** @type {!proto.authpb.Permission} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Type permType = 1;
 * @return {proto.authpb.Permission.Type}
 */
proto.authpb.Permission.prototype.getPermtype = function() {
  return /** @type {proto.authpb.Permission.Type} */ (jspb.Message.getField(this, 1));
};


/** @param {proto.authpb.Permission.Type|undefined} value  */
proto.authpb.Permission.prototype.setPermtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.authpb.Permission.prototype.clearPermtype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * optional bytes key = 2;
 * @return {(string|Uint8Array)}
 */
proto.authpb.Permission.prototype.getKey = function() {
  return /** @type {(string|Uint8Array)} */ (jspb.Message.getField(this, 2));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string?}
 */
proto.authpb.Permission.prototype.getKey_asB64 = function() {
  return /** @type {string?} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {Uint8Array}
 */
proto.authpb.Permission.prototype.getKey_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.authpb.Permission.prototype.setKey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.authpb.Permission.prototype.clearKey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * optional bytes range_end = 3;
 * @return {(string|Uint8Array)}
 */
proto.authpb.Permission.prototype.getRangeEnd = function() {
  return /** @type {(string|Uint8Array)} */ (jspb.Message.getField(this, 3));
};


/**
 * optional bytes range_end = 3;
 * This is a type-conversion wrapper around `getRangeEnd()`
 * @return {string?}
 */
proto.authpb.Permission.prototype.getRangeEnd_asB64 = function() {
  return /** @type {string?} */ (jspb.Message.bytesAsB64(
      this.getRangeEnd()));
};


/**
 * optional bytes range_end = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRangeEnd()`
 * @return {Uint8Array}
 */
proto.authpb.Permission.prototype.getRangeEnd_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRangeEnd()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.authpb.Permission.prototype.setRangeEnd = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.authpb.Permission.prototype.clearRangeEnd = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * @enum {number}
 */
proto.authpb.Permission.Type = {
  READ: 0,
  WRITE: 1,
  READWRITE: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.authpb.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.authpb.Role.repeatedFields_, null);
};
goog.inherits(proto.authpb.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.authpb.Role.displayName = 'proto.authpb.Role';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.authpb.Role.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.authpb.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.authpb.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.authpb.Role} msg The msg instance to transform.
 * @return {!Object}
 */
proto.authpb.Role.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName_asB64(),
    keypermissionList: jspb.Message.toObjectList(msg.getKeypermissionList(),
    proto.authpb.Permission.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.authpb.Role}
 */
proto.authpb.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.authpb.Role;
  return proto.authpb.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.authpb.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.authpb.Role}
 */
proto.authpb.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.authpb.Permission;
      reader.readMessage(value,proto.authpb.Permission.deserializeBinaryFromReader);
      msg.getKeypermissionList().push(value);
      msg.setKeypermissionList(msg.getKeypermissionList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.authpb.Role} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.authpb.Role.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.authpb.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.authpb.Role.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName_asU8();
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getKeypermissionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.authpb.Permission.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.authpb.Role} The clone.
 */
proto.authpb.Role.prototype.cloneMessage = function() {
  return /** @type {!proto.authpb.Role} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes name = 1;
 * @return {(string|Uint8Array)}
 */
proto.authpb.Role.prototype.getName = function() {
  return /** @type {(string|Uint8Array)} */ (jspb.Message.getField(this, 1));
};


/**
 * optional bytes name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string?}
 */
proto.authpb.Role.prototype.getName_asB64 = function() {
  return /** @type {string?} */ (jspb.Message.bytesAsB64(
      this.getName()));
};


/**
 * optional bytes name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {Uint8Array}
 */
proto.authpb.Role.prototype.getName_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getName()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.authpb.Role.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.authpb.Role.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * repeated Permission keyPermission = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.authpb.Permission>}
 */
proto.authpb.Role.prototype.getKeypermissionList = function() {
  return /** @type{!Array.<!proto.authpb.Permission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.authpb.Permission, 2));
};


/** @param {Array.<!proto.authpb.Permission>|undefined} value  */
proto.authpb.Role.prototype.setKeypermissionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.authpb.Role.prototype.clearKeypermissionList = function() {
  this.setKeypermissionList([]);
};


goog.object.extend(exports, proto.authpb);
